{"id":"node_modules/core-js/internals/correct-is-regexp-logic.js","dependencies":[{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\package.json","includedInParent":true,"mtime":1710601249156},{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1710601242175},{"name":"../internals/well-known-symbol","loc":{"line":2,"column":30,"index":45},"parent":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\correct-is-regexp-logic.js","resolved":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\well-known-symbol.js"}],"generated":{"js":"'use strict';\r\nvar wellKnownSymbol = require('../internals/well-known-symbol');\r\n\r\nvar MATCH = wellKnownSymbol('match');\r\n\r\nmodule.exports = function (METHOD_NAME) {\r\n  var regexp = /./;\r\n  try {\r\n    '/./'[METHOD_NAME](regexp);\r\n  } catch (error1) {\r\n    try {\r\n      regexp[MATCH] = false;\r\n      return '/./'[METHOD_NAME](regexp);\r\n    } catch (error2) { /* empty */ }\r\n  } return false;\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/core-js/internals/correct-is-regexp-logic.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}}],"sources":{"node_modules/core-js/internals/correct-is-regexp-logic.js":"'use strict';\r\nvar wellKnownSymbol = require('../internals/well-known-symbol');\r\n\r\nvar MATCH = wellKnownSymbol('match');\r\n\r\nmodule.exports = function (METHOD_NAME) {\r\n  var regexp = /./;\r\n  try {\r\n    '/./'[METHOD_NAME](regexp);\r\n  } catch (error1) {\r\n    try {\r\n      regexp[MATCH] = false;\r\n      return '/./'[METHOD_NAME](regexp);\r\n    } catch (error2) { /* empty */ }\r\n  } return false;\r\n};\r\n"},"lineCount":17}},"error":null,"hash":"03a7231ad36ae50d172c56af5cc767c0","cacheData":{"env":{}}}