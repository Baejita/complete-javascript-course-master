{"id":"node_modules/core-js/internals/to-positive-integer.js","dependencies":[{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\package.json","includedInParent":true,"mtime":1710694822527},{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1710691878794},{"name":"../internals/to-integer-or-infinity","loc":{"line":2,"column":34,"index":49},"parent":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\to-positive-integer.js","resolved":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\to-integer-or-infinity.js"}],"generated":{"js":"'use strict';\r\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\r\n\r\nvar $RangeError = RangeError;\r\n\r\nmodule.exports = function (it) {\r\n  var result = toIntegerOrInfinity(it);\r\n  if (result < 0) throw new $RangeError(\"The argument can't be less than 0\");\r\n  return result;\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/core-js/internals/to-positive-integer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}}],"sources":{"node_modules/core-js/internals/to-positive-integer.js":"'use strict';\r\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\r\n\r\nvar $RangeError = RangeError;\r\n\r\nmodule.exports = function (it) {\r\n  var result = toIntegerOrInfinity(it);\r\n  if (result < 0) throw new $RangeError(\"The argument can't be less than 0\");\r\n  return result;\r\n};\r\n"},"lineCount":11}},"error":null,"hash":"cbf25945dbd1df4331d50d54f6cb874f","cacheData":{"env":{}}}