{"id":"d3zV","dependencies":[{"name":"D:\\ลับสุดยอด\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\package.json","includedInParent":true,"mtime":1710843841725},{"name":"D:\\ลับสุดยอด\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1710843048144},{"name":"../internals/math-trunc","loc":{"line":2,"column":20,"index":35},"parent":"D:\\ลับสุดยอด\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\to-integer-or-infinity.js","resolved":"D:\\ลับสุดยอด\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\math-trunc.js"}],"generated":{"js":"\"use strict\";var r=require(\"../internals/math-trunc\");module.exports=function(t){var e=+t;return e!=e||0===e?0:r(e)};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":1,"column":17}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":1,"column":19}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":1,"column":27}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":1,"column":54}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":1,"column":61}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":1,"column":69}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":1,"column":78}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":1,"column":81}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":1,"column":85}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":1,"column":88}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":90}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":97}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":100}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":103}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":107}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":109}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":111}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":1,"column":113}}],"sources":{"node_modules/core-js/internals/to-integer-or-infinity.js":"'use strict';\r\nvar trunc = require('../internals/math-trunc');\r\n\r\n// `ToIntegerOrInfinity` abstract operation\r\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\r\nmodule.exports = function (argument) {\r\n  var number = +argument;\r\n  // eslint-disable-next-line no-self-compare -- NaN check\r\n  return number !== number || number === 0 ? 0 : trunc(number);\r\n};\r\n"},"lineCount":null}},"error":null,"hash":"c406536b5f3e9fc373ed006eafccfaf7","cacheData":{"env":{}}}