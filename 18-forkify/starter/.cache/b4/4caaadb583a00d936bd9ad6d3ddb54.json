{"id":"node_modules/core-js/internals/to-absolute-index.js","dependencies":[{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\package.json","includedInParent":true,"mtime":1710601249156},{"name":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1710601242175},{"name":"../internals/to-integer-or-infinity","loc":{"line":2,"column":34,"index":49},"parent":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\to-absolute-index.js","resolved":"D:\\JavaScript\\complete-javascript-course-master\\complete-javascript-course-master\\18-forkify\\starter\\node_modules\\core-js\\internals\\to-integer-or-infinity.js"}],"generated":{"js":"'use strict';\r\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\r\n\r\nvar max = Math.max;\r\nvar min = Math.min;\r\n\r\n// Helper for a popular repeating case of the spec:\r\n// Let integer be ? ToInteger(index).\r\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\r\nmodule.exports = function (index, length) {\r\n  var integer = toIntegerOrInfinity(index);\r\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/core-js/internals/to-absolute-index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"node_modules/core-js/internals/to-absolute-index.js":"'use strict';\r\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\r\n\r\nvar max = Math.max;\r\nvar min = Math.min;\r\n\r\n// Helper for a popular repeating case of the spec:\r\n// Let integer be ? ToInteger(index).\r\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\r\nmodule.exports = function (index, length) {\r\n  var integer = toIntegerOrInfinity(index);\r\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\r\n};\r\n"},"lineCount":14}},"error":null,"hash":"e97684fc2e1369524a6404429cd5b712","cacheData":{"env":{}}}